{"posts":[{"title":"[Top] Training Records - Minming Fan Club","text":"Season: 2023-2024 (the 48th ICPC &amp; the 9th CCPC) Team Members: Yixiong GAO(G), Zhehan YU(YU), Shangkun ZHENG(Z), Yu HE(H), Fangzhao YAN(YA). Contests Date Contest Team Rank Solved Award 2023/09/23 ICPC EC-Online II G,YU,YA 71 / 2339 7 / 13 - 2023/10/28 IEEE Xtreme 17.0 G,YU,Z 11 / 7091 19 / 26 Hong Kong Championship 2023/11/05 CCPC Harbin Onsite G,YU,Z 14 / 244 6 / 13 Gold Medal 2023/11/12 CCPC Shenzhen Onsite G,YU,Z 85 / 268 4 / 13 Bronze Medal 2023/11/19 ICPC Macau Regional (Observer) G,YU 17 / 77 5 / 11 Quickest Solver (E, J) 2023/12/04 ICPC Jinan Regional G,YU,H 45 / 346 7 / 13 Silver Medal 2023/12/10 ICPC Hangzhou Regional G,YU,YA 20 / 435 6 / 13 Gold Medal 2024/01/13 ICPC EC-Final G,YU,YA 47 / 280 6 / 13 Silver Medal Virt. Contests Date Contest Team Solved UpSolved 2023/09/19 2018-2019 ICPC Asia Jiaozuo Regional G,YU 7 / 12 7 / 12 2023/09/21 2019-2020 ICPC Southeastern European Regional G,YU,YA 7 / 11 7 / 11 2023/09/26 2020-2021 ICPC Asia Seoul Regional G,YU 9 / 12 9 / 12 2023/09/27 2022-2023 ICPC Asia Manila Regional G,YU,Z 10 / 12 10 / 12 2023/09/30 The 46th ICPC Southwestern European Regional G,YU,YA 9 / 12 9 / 12 2023/10/12 COMPFEST 13 - Finals G,H,Z 10 / 13 10 / 13 2023/10/14 COMPFEST 14 - Preliminary G,YU,Z 10 / 13 10 / 13 2023/10/17 The 47th ICPC Asia Shenyang Regional G,YU 5 / 13 6 / 13 2023/10/19 2018-2019 ICPC Asia East Continent Finals G,YU,Z 4 / 12 4 / 12 2023/10/20 The 45th ICPC NERC Russian Regional G,YU,Z 13 / 14 13 / 14 2023/10/21 2017-2018 ICPC Asia East Continent League Finals G,YU,Z 9 / 13 9 / 13 2023/10/30 2023年中国大学生程序设计竞赛女生专场 G,YU,Z 9 / 12 9 / 12 2023/11/01 2020 CCPC Finals G,YU,Z 6 / 13 6 / 13 2023/11/10 The 9th CCPC Guilin Onsite G,YU,Z 6 / 13 7 / 13 2023/11/22 The 47th ICPC Central Europe Regional G,YU,H 7 / 13 8 / 13 2023/11/25 The 48th ICPC Asia Nanjing Regional G,YU,H 7 / 13 7 / 13 2023/11/26 2023 ICPC Southwestern European Regional G,YU,YA 6 / 13 6 / 13 2023/11/29 The 1st UCup, Stage 4: Ukraine G,YU,H 8 / 14 9 / 14 2023/12/06 The 48th ICPC Asia Hefei Regional G,YU 6 / 12 7 / 12 2024/01/04 The 48th ICPC NERC Regional G,YU,YA 7 / 12 7 / 12 2024/01/06 2018-2019 ICPC NEERC Finals G,YU,YA 8 / 13 8 / 13 2024/01/09 The 48th ICPC Asia Shenyang Regional G,YU,YA 6 / 12 6 / 12 2024/02/25 The 2nd Universal Cup. Stage 21: Delft G,YU,Z 4 / 11 4 / 11 2024/03/02 2024 ICPC Asia Pacific Championship G 5 / 11 7 / 11","link":"/summary/minming-fan-club/"},{"title":"AtCoder Regular Contest 173","text":"比赛链接，官方题解 ID Difficulty (0-5) Topic Status Code A 1 Binary Search, Math Solved A.cpp B 1 Greedy, Boyer–Moore Solved B.cpp C 3 Conclusion, Brute Force Upsolved C.cpp D 3 Constructive Algorithms, Negative Cycle Upsolved D.cpp E F B - Make Many Triangles 给定二维平面上的 $n$ 个点，每个点最多用一次，问最多能形成多少个不退化的三角形？ 找出共线最多的点数 $x$ ，每次可以用 $x$ 中的两个点和外面的一个点构造，如此迭代。 所以答案是 $\\min(\\lfloor\\frac{n}{3}\\rfloor,n-x)$ ，复杂度瓶颈是求出共线最多的点数。 暴力是 $O(n^3)$ 的，以每个点为中心进行极角排序是 $O(n^2\\log n)$ 的。 如果使用 Boyer–Moore 投票法，复杂度降低为 $O(n)$ 。 具体就是维护一个 stack，每次来一个点检查： 如果 size &lt; 2，那么直接把这个点加入； 否则判断栈顶两个点和当前点是否能形成三角形，如果可以就弹出；否则把这个点加入。 最后如果 size &lt; 3 那么答案就是 $\\lfloor\\frac{n}{3}\\rfloor$ ；否则检查一遍，和当前栈中的点所共线的点数即可。 证明过程和 Boyer–Moore 投票法一致，如果存在超过 $n-\\lfloor\\frac{n}{3}\\rfloor$ 的 $x$ ，那么最终它一定会被剩下来，因为每次形成的三角形最多占走 $x$ 中的 $2$ 个，而算法最多生成 $\\lfloor\\frac{n}{3}\\rfloor$ 个三角形并不足以消耗完 $x$ 个共线的点。 C - Not Median 给定一个排列 $p_1,p_2,\\dots,p_n$ 。 对每个 $p_i$ 找一个最短的包含它的奇数长度的区间，满足 $p_i$ 不是中位数。 对于 $p_1,p_n$ 边界的特殊情况，先用 $O(n)$ 的时间把答案求出来。 否则考虑 $p_{i-1},p_{i+1}$ ，考虑其和 $p_i$ 的大小关系，如果相同的话答案显然是 $[i-1,i+1]$ 。 否则向两侧分别看，如果和 $p_i$ 的大小关系一直是交替的，那么一直会让 $p_i$ 是中位数。 考虑找到最大的 $L&lt;i$ 满足 $[p_L&gt;p_i]=[p_{L-1}&gt;P_i]$ ，同样找到最小的 $R&gt;i$ 满足 $[p_R&gt;p_i]=[p_{R+1}&gt;p_i]$ 。 对于 $L\\le l\\le i\\le r\\le R$ 的所有奇数长度区间 $[l,r]$ ，都会让 $p_i$ 是中位数。 如果 $l=L-1$ ，容易发现包含 $i$ 后第一个奇数长度的区间一定不是 $p_i$ 为中位数，同样对 $r=R+1$ 。 因此答案就是这俩对应的区间长度的 $\\min$ 。 维护每个位置和 $p_i$ 大小关系的符号，按照 $p_i$ 从小到大的顺序求答案，每次只有两个位置的符号会有改变。 然后用 set 维护相邻符号相同的位置即可，每次修改也只会有两个位置在 set 里的情况会改变。 这样总复杂度是 $O(n\\log n)$ 的。 继续分析，先判断掉答案为 $[i-1,i+1]$ 的情况后，暴力的搜索 $L,R$ 的总复杂度是对的。 考虑所有需要搜索的位置分别为 $i_1,i_2,\\dots,i_k$ ，我们有性质每个 $i$ 一定是 $[i-1,i+1]$ 的中位数。 考虑对于其中某个 $i_j$ ：$p_{i_{j-1}}$ 关于 $p_{i_j}$ 的大小关系一定和 $i_{j-1}-1,i_{j-1}+1$​ 中至少一个一致。 对于右侧有同样的分析，因此对于 $i_j$ 我们有 $L\\ge i_{j-1},R\\le i_{j+1}$ ，这样所有的 $R-L$ 的和是 $O(n)$ 的。 D - Bracket Walk 给一个强连通图，每条边上都有一个左括号或右括号。 是否存在一个回路，过每条边至少一次，并且沿着路径记下来的括号序列合法。 数据范围：$n\\le 4000,m\\le 8000$ 我们把 ( 看作 $+1$ ，把 ) 看作 $-1$ ，则括号序列合法对应于：总和为 $0$，且任意前缀和 $\\ge 0$。 结论 $1$ ：如果一个回路总和为 $0$ ，总是可以调整成合法的序列。因为回路可以任选起点，所以沿着回路找到前缀和最小的点设置为新的起点，这样任意位置前缀和一定 $\\ge 0$ 了。 结论 $2$ ：如果图中有正环负环存在情况相同则有解。 如果同时不存在：任一回路和都是 $0$ ，其中包括某个经过所有边的，因此答案存在。 如果同时存在：如果找到了一个经过所有边的回路和为 $+x$ ，找到的负环和为 $-y$ ，那么把 $+x$ 重复 $y$ 遍，再把 $-y$ 重复 $x$ 遍接在一起就可以得到和为 $0$ 的回路。反过来做法类似。 如果只存在一种：假设图中只存在正环，并且假设存在答案。因为答案包含所有边，我们把找到的正环中的边从中移除，回路中剩余的部分会分成若干段。考虑删掉的环中相邻的两条边如果在答案中没有连续使用，说明在中间的这个点处一定进来一次出去一次，不妨就这样把这两次连起来。这样所有的断开的位置都能找到一个配对的，剩余的路径会形成若干回路，并且他们的和是负的，这说明其中至少存在一个负环，与假设矛盾。 Bellman-Ford 判断图中是否存在正环/负环即可，正环可以转化成边权取反的负环。总复杂度 $O(nm)$ 。","link":"/contest/atcoder/arc/173/"},{"title":"Codeforces Round 932 (Div. 2)","text":"比赛链接，官方题解 ID Difficulty (0-5) Topic Status Code A 0 Greedy Solved A.cpp B 0 MEX Solved B.cpp C 2 Greedy Solved C.cpp D 1 Counting Solved D.cpp E 3 Segment Tree, Greedy Upsolved E.cpp F 3 Kruskal, DFS order Solved F.cpp B. Informatics in MAC两个 MEX 相同的集合合并之后 MEX 不变。所以有解一定可以划分成两个集合。 C. Messenger in MAC按 B 升序排序后，枚举选中区间，则至少有 $b_r-b_l$ 的代价。 然后对区间内的 $a$ 排序做贪心即可，复杂度 $O(n^3\\log n)$ 。 注意到随着右端点的增加留给 $a$ 的空间会变少，因此可以用堆维护贪心的过程，随着右端点变大，之前删除的数不可能放回来。这样固定 $l$ 每个数只会插入删除各一次，复杂度就降低到了 $O(n^2\\log n)$ 。 注意考虑代价的时候不能带上 $a_l+a_r$ ，有可能某个 $a_r$ 很大导致误删了前面的 $a$ 。 D. Exam in MAC计数不合法。注意到数重的两个 $s_i$ 奇偶性一定相同即可。 E. Distance Learning Courses in MAC 给定 $n$ 个区间 $[l_i,r_i]$ ，每个区间内选一个点 $x_i\\in [l_i,r_i]$ ，使得所有 $x_i$ 的按位或最大。 考虑没有左端点的约束，有一个贪心过程： 令 $cnt[x]$ 表示所有的 $r_i$ 中有多少个第 $x$ 位是 $1$ ，然后从高往低贪心，如果 $cnt[x]=1$ 则这一位是 $1$ ，$cnt[x]=0$ 则这一位是 $0$ ，直到遇到 $cnt[x]&gt;1$ ，则从第 $x$ 位往下都可以变成 $1$ （退位一个 $2^x$）。 加上左端点约束时，考虑 $l_i,r_i$ 的二进制表达lcp，这部分是不能改变的。对于剩下的部分，注意到对齐后一定是 $r_i$ 以 $1$ 开头而 $l_i$ 以 $0$ 开头，这相当于允许 $r_i$ 的高位退位，$l_i$ 的约束相当于不存在了。 因此线段树维护区间 lcp 的或，以及剩余的 $r_i$ 各位的 $cnt$ ，查询出区间信息后跑一遍上面的贪心即可。 总复杂度 $O(n\\log n)$ 。 F. Andrey’s Tree 给一棵树，对每个结点 $v$ 考虑： 删除节点 $v$ ，然后把形成的若干连通块重新连成一棵树的最小代价。 增加一条连接 $(a,b)$ 的边的代价是 $|a-b|$ 。 考虑 Kruskal 的过程，我们先考虑所有边权为 $1$ 的边，一定可以把 $[1,v-1]$ 和 $[v+1,n]$ 分别连通。 如果此时整个树还没有连通，则需要补充 $(v-1,v+1)$ 这条边。 对于每个连通块，只需要考虑其内部点编号 $\\min$ 向 $\\min-1$ ，以及内部点编号 $\\max$ 向 $\\max+1$ 的边。这些边足够实现把 $[1,v-1]$ 和 $[v+1,n]$ 分别连通的目标。 这样每次需要考虑的边数是 $O(deg_v)$ 的，每次暴力做 Kruskal ，总复杂度也是 $O(n\\log n)$ 的。 需要 DFS序 + ST 表辅助查询最小最大点编号，以及定位点所在连通块。总复杂度 $O(n\\log n)$ 。","link":"/contest/codeforces/1935/"},{"title":"The 2024 ICPC Asia Pacific Championship","text":"补题链接, 题面, 官方题解 题挺好的，猜结论还是要大胆一点，坚持训练！ ID Difficulty (0-5) Topic Status Code A B C 2 Greedy, Implementation Solved C.cpp D E 2 Constructive Algorithms Solved E.cpp F 3 Monotonic Queue Upsolved F.cpp G 3 Pigeonhole Principle, Bitset Solved G.cpp H 1 Greedy Solved H.cpp I J 2 Shortest Path Solved J.cpp K 4 DSU on Tree, Segment Tree Upsolved K.cpp L M C. Bit Counting Sequence注意到每次进位都能确定数列中的一段，模拟即可。 E. Duplicates假设不合法的行数是 $x$ ，不合法的列数是 $y$ ，那么答案至少是 $\\max(x,y)$ ，存在构造达到这个下界。 矩阵内数字都在 $[1,n]$ 内，所以不合法的行列一定是 $n$ 的排列。 每次选一个不合法的行，一个不合法的列，在交点位置改成这一行列其他位置有的某个数就行了。 对于剩下的不合法的找一个合法的配对，分类讨论证明一定有解，然后暴力枚举交点换成谁即可。 复杂度 $O(n^3)$ 。 F. Forming Groups 给定数列 $b_1,b_2,b_3,\\dots,b_{n-1}$ ，选一个位置把 $x$ 插进去（有 $n$ 种不同的位置），形成一个新数列 $a$ 。 然后选一个 $n$ 的因数 $k$ ，把 $a$ 分成 $k$ 组，$a_i$ 被分到第 $i\\mod k + 1$ 组，记录第 $i$ 组的 $a$ 之和为 $w_i$ 。 找一个放 $x$ 和选 $k$ 的方案，最小化 $\\displaystyle \\frac{\\max w_i}{\\min w_i}$ 。 枚举 $k$ ，每个 $b_i$ 只有可能被分到第 $i\\mod k + 1$ 组和第 $(i+1)\\mod k + 1$ 组。 枚举 $x$ 的位置，每次只会有两个组的 $w$ 受到影响，线段树维护单点修改查询全局 $\\min,\\max$ 。 注意到随着枚举 $x$ 的位置，每次受影响的组的编号是连续的，可以把线段树换成单调队列。 再注意到 $k$ 其实只需要枚举 $n$ 的质因子，这样只需要试最多 $7$ 个不同的数了。证明如下： 如果把 $n$ 分成了某个合数 $k=pq$ 组，证明分成 $p$ 组不会变差： 相当于原来的 $pq$ 组每 $q$ 组合在一起，新的最小值 $\\ge$ 原来最小值 $q$ 倍，新的最大值 $\\le $ 旧的最大值 $q$ 倍。 因此比值乘了一个不大于 $1$ 的值，不会变差。 复杂度 $O(7\\times n)$ 。 G. Personality Test 给 $n$ 个长度都是 $m$ 的字符串，找两个字符串 $i,j$ ，使得两个字符串至少有 $k$ 个位置对应字符相等。 有多个解的时候先最小化 $j$ ，再最大化 $i$ 。数据范围：$n\\le 5000,m\\le 3000,k\\le 5$ 官方做法是鸽巢原理。考虑每个字符串对有多少个位置一样，最开始都设置成 $0$ 。 每次找到一个位置一对字符串相等，就把他们的答案 $+1$ 。 我们最多加 $(k-1)\\times{n\\choose 2} + 1$ 次，就一定会有一对的答案 $\\ge k$ 。 枚举 $j$ ，然后枚举每个位置，把这个位置上字符相同的那些 $i$ 贡献 $+1$ 。 总复杂度 $O(kn^2+nm)$ 。 有个暴力的做法可以求出所有符合要求的字符串对。 每次枚举一个当前的字符串 $j$，设 $S_{pos,t}$ 表示只看前 $pos$ 位，有至少 $t$ 个位置和当前串一致的字符串下标集。 每次转移形如 $S_{pos+1,t}=S_{pos,t}\\cup (S_{pos,t-1}\\cap T_{pos+1,str[j][pos]})$ ，其中 $T$ 表示这个位置和当前字符一致的字符串下标集。最终答案就是 $S_{m,k}$ 。 使用 bitset 加速这一过程，复杂度 $O(n^2mk/\\omega)$ 。 H. Pho Restaurant贪心，每桌都移走较少的那种就行。所有桌移走的颜色一致时特殊讨论下。 J. There and Back Again首先证明一条肯定是最短路： 否则两条都不是最短路且两条边集不同，那么把其中一条换成最短路依旧满足边集不同。 因此先找出最短路，然后建立分层图，让第二条路经强制走一条不在最短路中的边就行了。 K. Tree Quiz首先注意到这是个 $n$ 进制的三位数。因此 $x$ 可以直接从下标算出，$x=\\lceil\\frac{k}{n}\\rceil$。 接下来求 $lca$ 转化成当前点到根的链上，每个点有一个权值（自己的子树大小减去对应儿子的子树大小），然后按照编号大小排序，找前缀和为某个值的位置，DFS 的同时线段树维护链上的点及其 size 信息，然后线段树上二分即可，复杂度 $O(n\\log n)$。 接下来求 $y$ 就转化成了，询问 $lca$ 子树中，除了 $x$ 所在的这个子树以外的所有点中编号第 $k$ 大的是谁，可以 DSU on Tree + 线段树维护，每次询问线段树上二分。复杂度 $O(n\\log^2 n)$ 。 总复杂度 $O(n\\log^2 n)$ 。 对于最后一步，如果改成使用主席树在 DFS 序上维护节点编号集，每次从子树中扣掉一个儿子的子树，就变成了 DFS 序上的两段，四个节点并行在主席树上跑即可。 这样总复杂度降低到 $O(n\\log n)$ ，并且不用讨论轻重儿子，实现起来简单很多。","link":"/contest/icpc/48/asia-pacific-championship/"},{"title":"AtCoder Beginner Contest 342","text":"比赛链接，官方题解 ID Difficulty (0-5) Topic Status Code A 0 Brute Force Solved A.cpp B 0 Brute Force Solved B.cpp C 1 Implementation Solved C.cpp D 1 Number Theory Solved D.cpp E 2 Shortest Path Solved E.cpp F 3 Probabilities Solved F.cpp G 3 Segment Tree Solved G.cpp F - Black Jack 两个人投一个 $D$ 面的骰子，每次投出来就把对应数字累计到自己的分数上。 对手的策略是一直投，直到总分 $y\\ge L$ 。 如果最终你的总分 $x&gt;N$ 你就输了； 否则如果对手的总分 $y&gt;N$ 你会赢； 否则如果 $x&gt;y$ 你才会赢，否则你输。 问你最优策略下赢的概率。 两人的得分是独立的。 对手的得分是 $x$ 的概率，以及得分 $&gt;N$ 的概率可以用前缀和优化递推 $O(N)$ 算出。 自己这侧的 dp 倒着做，$g[x]$ 代表当前是 $x$ ，最优决策下最终的胜率是多少。 每次决策投还是不投即可，总复杂度 $O(n)$ 。 G - Retroactive Range Chmax 给定一个数列 $A$ ，支持如下三种操作： 类型 1：区间和输入的 $x$ 取 $\\max$ ； 类型 2：撤销第 $i$ 个操作，保证第 $i$ 个操作是类型 1 且此前未被撤销过； 类型 3：在原数列上执行所有未被撤销的类型 1 操作后，查询 $A_i$ 的值。 线段树套 set + 标记永久化。 线段树每个节点 set&lt;pair&gt; 维护覆盖这个区间的类型 1 操作的 ($x$，操作编号）。 查询就是从根到叶子链上所有 set 里的 max 的 max 。 这样修改、撤销、查询复杂度都是 $(\\log^2 n)$ 的了。总复杂度 $O(n\\log^2 n)$ 。","link":"/contest/atcoder/abc/342/"},{"title":"Codeforces Round 927 (Div. 3)","text":"比赛链接，官方题解 ID Difficulty (0-5) Topic Status Code A 0 Greedy Solved A.cpp B 0 Greedy Solved B.cpp C 1 Implementation Solved C.cpp D 1 Greedy Solved D.cpp E 1 Implementation Solved E.cpp F 2 Dynamic Programming Solved F.cpp G 3 Shortest Path Upsolved G.cpp F. Feed Cats 给若干线段，选一些点。 使得每个线段最多包含一个选中的点，并且最大化包含选中点的线段数。 离散化之后有用的点和线段数同级别。 对每个位置 $i$，预处理其覆盖的线段数量 $cnt_i$ ，和这些线段左边界的最小值 $L_i$。 动态规划。令 $f_i$ 表示最后一个选中的点是 $i$​ ，最多能覆盖多少个线段。 则 $f_i=\\max_{1\\le j&lt;L_i} f_j+cnt_i$ ，维护前缀 max 支持转移，总复杂度 $O(n)$ 。 G. Moving Platforms 无向图 $n$ 个点 $m$ 条边，每个点有两个参数 $l_i,s_i$ ，以及一个参数 $H$ 。 第 $t$ 时刻，第 $i$ 个点的颜色是 $(l_i+s_i\\cdot (t-1))\\mod H$ 。 一条边只有两个端点颜色相同的时候才有效。 $1$ 时刻起从 $1$ 号点出发，每个时刻可以选择不动，或者走一条有效的边，求最早能到 $n$ 的时间。 Dijkstra 求最短路。 考虑每次在一个点扫描它的所有出边，在 $u\\to v$ 这条边上所需的时间，就是最近一次两个点颜色相同的时刻和现在时刻 （即 $dis[u]$ ）的差值。 求最近的颜色相同的时刻是一个同余方程，可以扩展欧几里得求出。 总复杂度 $O(m\\log n+m\\log H)$​ 。细节： 每个时刻只能走一条边，所以更新的时候要处理成 dis[v] = dis[u] + dlt + 1； dis 是 long long 级别，求当前层的 l[u]+s[u]*(dis[u]-1) 会爆 long long 。","link":"/contest/codeforces/1932/"},{"title":"AtCoder Beginner Contest 341","text":"比赛链接，官方题解 ID Difficulty (0-5) Topic Status Code A 0 Brute Force Solved A.cpp B 0 Greedy Solved B.cpp C 0 Brute Force Solved C.cpp D 1 Number Theory Solved D.cpp E 2 Segment Tree Solved E.cpp F 2 Knapsack Solved F.cpp G 2 Convex Hull Trick Solved G.cpp E - Alternating String 维护 01 数列，支持区间翻转，查询区间是否 01 交替。 线段树维护区间开头，结尾，是否01交替，懒标记支持区间操作。 F - Breakdown 给定无向图，每个点 $u$ 有点权 $w_u$ ，第 $i$ 个点上有 $a_i$ 个石子。 每轮行动，选择一个石子，假设其所在的点为 $u$ 。 从 $u$ 的邻居 $N(u)$ 中选一个子集 $S\\subseteq N(u)$ ，满足 $\\sum_{v\\in S} w_v &lt; w_u$ 。 将 $u$ 上石子数 $-1$ ， $S$ 中每个点 $v$ 上石子数 $+1$ 。 问可以最多行动多少轮。数据范围 $1\\le n,m,w_u\\le 5000$ 。 首先所有石子所在点的 $w$ 之和随着行动肯定是减小的，游戏会结束。 令 $f_u$ 表示 $u$ 上的一个石子可以使游戏进行多少轮，由于石子所在权值一定变小，所以移走就回不来，转移关系是DAG。将每条边由权值较小的点连向权值较大的点，跑拓扑排序 + 01 背包。 每条边只会被用来做一次背包，复杂度 $O(m\\cdot \\max w_u)$ 。 G - Highest Ratio 给定数列 $a_1,a_2,\\dots,a_n$ ，对每个 $i\\in{1,2,\\dots,n}$ ，找一个 $j\\in{i,i+1,\\dots,n}$，最大化 $a_i,a_{i+1},\\dots,a_j$ 的平均值。 预处理 $a$ 的前缀和数组 $sum$ 。容易发现所求$$ans_i=\\arg\\max_{i\\le j\\le n}\\frac{sum_j-sum_{i-1}}{j-(i-1)}$$把 $(i, sum_i)$ 看作二维平面上的点，$f_i$ 其实就是从 $(i-1,sum_{i-1})$ 向后看，找一个点构成的直线斜率最大。 容易发现这条直线就是 $(i-1,sum_{i-1})$ 向后面的点集的凸包的切线。 单调栈维护上凸壳 + 凸壳上三分即可。复杂度 $O(n\\log n)$ 。","link":"/contest/atcoder/abc/341/"},{"title":"Codeforces Round 925 (Div. 3)","text":"比赛链接，官方题解 ID Difficulty (0-5) Topic Status Code A 0 Greedy Solved A.cpp B 0 Greedy Solved B.cpp C 0 Greedy Solved C.cpp D 1 Counting Solved D.cpp E 1 Greedy, Games Solved E.cpp F 1 Brute Force Solved F.cpp G 2 Combinatorics Solved G.cpp D. Divisible Pairs 给定 $x,y$ 和数列 $a_1,a_2,\\dots,a_n$ ，求有多少对 $(a_i,a_j)$ 满足： $1\\le i &lt; j\\le n$ $a_i+a_j \\mod x = 0$ $a_i-a_j \\mod y = 0$ 把一个数字 $a_i$ 转化为 $(u_i,v_i)$ :$$\\left\\{\\begin{array}{l}u_i=a_i\\mod x\\\\v_i=a_i\\mod y\\\\\\end{array}\\right.$$ 根据限制条件，有 $(u_i,v_i)$ 和 $((x-u_i)\\mod x,v_i)$ 匹配，map 计数即可，复杂度 $O(n\\log n)$ 。 E. Anna and the Valentine’s Day Gift每轮都是舍掉一个数的后缀 0 /保护一个数的后缀 0 。 按照后缀 0 的个数从大到小排序，然后贪心即可，复杂度 $O(n\\log n)$ 。 F. Chat Screenshotss如果 $k=1$ 一定是 YES 。 否则假设提供的前两个序列分别是 $a_1,a_2,\\dots,a_n$ 和 $b_1,b_2,\\dots,b_n$ 。 如果存在答案，那么答案序列一定在下列三个之中（假设 $b_j=a_1$ ）： $a$ 就是答案序列：$a_1,a_2,\\dots,a_n$ $a$ 不是答案序列，并且答案序列中 $a_1$ 不在 $b_1$ 后： $a_2,a_3,\\dots,a_i,a_1,a_{i+1},\\dots,a_n \\ (a_i=b_{j-1})$ $a$ 不是答案序列，并且答案序列中 $a_1$ 在 $b_1$ 后： $a_2,a_3,\\dots,a_i,a_1,a_{i+1},\\dots,a_n\\ (a_i=b_1)$ check 就直接暴力的 $O(nk)$ 即可。 G. One-Dimensional Puzzle观察到 $3,4$ 只是起类似于继承的关系，比如一个向右的突起可以接任意多个 $3$ 。 如果 $1,2$ 都没有，那么 $3,4$ 只能存在一种。 如果 $1,2$ 至少有一个，那么 $3,4$ 一定能用完，且 $3,4$ 的方案数相当于装箱计数。 如果 $1,2$ 不一样多，只有 $|c_1-c_2|=1$ 时有解，且 $1,2$ 的排列方式唯一，答案就是 $3,4$ 方案数乘积。 如果 $1,2$ 一样多，那么有两种排列 $1,2$ 的方法，分别计算对应的 $3,4$ 方案数求和即可。","link":"/contest/codeforces/1931/"},{"title":"The 48th ICPC Asia Hangzhou Regional Contest","text":"补题链接, 英文题面, 中文题面, 官方题解 题目思维量大但比较套路，感觉需要多积累，没想到最后赢在了模拟写的快 ID Difficulty (0-5) Topic Status Code","link":"/contest/icpc/48/hangzhou/"},{"title":"Codeforces Round 924 (Div. 2)","text":"比赛链接，官方题解 ID Difficulty (0-5) Topic Status Code A 0 Brute Force Solved A.cpp B 0 Two Pointers Solved B.cpp C 1 Math Solved C.cpp D 1 Greedy Solved D.cpp E 3 Dynamic Programming Upsolved E.cpp F 4 Combinatorics, Segment Tree Upsolved F.cpp E. Modular Sequence 给定 $n,x,y,s$ ，问是否能构造以恶搞长度为 $n$ 的数列 $a$ ，满足： $a_1=x$ $a_i=a_{i-1}+y$ 或 $a_i=a_{i-1}\\mod y$ $\\sum_{i=1}^n a_i= s$ 令 $r=x\\mod y$，不妨令 $s’=(s-nr)/y, x’=(x-r)/y$ ，选择改成置为 $0$ 或加 $1$ 。 我们称连续增长的为一段。则答案中除了第一段都是从 $0$ 开始的。 因为求和增长的速度是平方级别的，所以每一段连续的长度不会超过 $O(\\sqrt{s})$ 。 把这 $O(\\sqrt{s})$ 中不同的段按照长度拿出来做个完全背包，求出凑出某个数所需的最小长度。 然后枚举第一个 $0$ 的位置即可。复杂度 $O(s\\sqrt{s}+\\sum n)$ 。 F. Digital Patterns 给两个数列 $a_1,a_2,\\dots,a_n$ 和 $b_1,b_2,\\dots,b_m$ ，生成一个 $n\\times m$ 的矩阵 $c_{i,j}=a_i+b_j$ 。 查询 $c$ 有多少个子正方形满足范围内上下左右相邻的数字里没有相同的。 支持对 $a,b$ 进行区间加，查询符合条件的子正方形数量。","link":"/contest/codeforces/1928/"},{"title":"AtCoder Beginner Contest 340","text":"比赛链接，官方题解 ID Difficulty (0-5) Topic Status Code A 0 Brute Force Solved A.cpp B 0 Brute Force Solved B.cpp C 0 DFS / Math Solved C.cpp D 1 Shortest Path Solved D.cpp E 2 Segment Tree Solved E.cpp F 1 Extended Euclidean algorithm Solved F.cpp G 3 Auxiliary Tree, Dynamic Programming solved G.cpp G - Leaf Color 给定一棵无根树 $T$ ，每个点 $u$ 有一个颜色 $a_u$ 。 问这个树有多少个子图 $T’$ ，满足： $T’$ 是一棵树，且 $T’$ 中每个叶节点（度为 $1$）的颜色都相同。 颜色相同想到虚树，枚举 $T’$ 叶子的颜色 $C$ ，$T’$ 一定是这个颜色的虚树的子图。 动态规划计算每个点 $u$ 作为 $T’$ 中最高点时有 $f_u$ 种合法方案（不考虑对 $u$ 的约束）。 并一同计算 $f_u$ 中有 $g_u$ 种方案满足 $u$ 是叶子（$u$ 只选了一个儿子）。$$f_u=\\prod_{v\\in son_u} (f_v+1) - [color_u=C], ~~ g_u=\\sum_{v\\in son_u} f_v$$如果点 $u$ 是当前枚举的颜色（可以做叶子），向答案贡献 $f_u$ 。 否则不能出现 $g_u$ 中的情况， 向答案贡献 $f_u-g_u$ 。 复杂度 $O(n\\log n)$ 。","link":"/contest/atcoder/abc/340/"},{"title":"The 48th ICPC Asia Shenyang Regional Contest","text":"补题链接, 英文题面, 中文题面, 官方题解 中期开始每个题都很胖，沈阳的题目一如既往的清新但硬核… ID Difficulty (0-5) Topic Status Code","link":"/contest/icpc/48/shenyang/"},{"title":"The 48th ICPC Asia Jinan Regional Contest","text":"补题链接, 英文题面, 中文题面, 官方题解 题目思路比较直接，代码量略大，要注意比赛节奏 ID Difficulty (0-5) Topic Status Code A 1 Brute Force Solved B 3 Sqrt Decomposition, Knapsack on Tree Upsolved C 4 Constructive Algorithms D 0 Brute Force Solved D.cpp E 3 Network Flow, Bipartite Graph Matching Solved E.cpp F 4 Divide and Conquer, Data Structures G 2 Disjoint Set Union Solved G.cpp H 3 Suffix Array Upsolved I 1 Constructive Algorithms Solved I.cpp J 5 Math K 2 Two Pointers, Data Structures Solved K.cpp L 4 Dynamic Programming, Data Structures M 2 Convex Hull Solved M.cpp D. Largest Digit两个区间长度之和大于 $9$ 答案一定是 $9$，否则暴力。 E. I Just Want… One More… 给定一个二分图，问有多少种方式添加一条边（连接左右）使得匹配数 $+1$ 。 网络流求最大匹配，对于残量网络，$S$ 联通的点数乘 $T$ 联通的点数就是答案。 二分图上跑 Dinic (也就是Hopcraft) 复杂度是 $O(m\\sqrt{n})$ 的。 G. Gifts from Knowledge 给定一个 $r$ 行 $c$ 列的 01 矩阵，对每一行选择是否进行反转。 求选择一些行进行反转方案数（允许不选择任何行），使得每一列至多有一个 1 。 反转第 $i$ 行：$b_{i, 1}, b_{i, 2}, \\cdots, b_{i, c} \\to b_{i, c}, b_{i, c-1}, \\cdots, b_{i, 1}$ 。 每个 $1$ 只有在当前列和对称列两种选项（特殊处理 $c$ 奇数中间的情况） 如果两个 $1$ 对称，那么这两个 $1$ 所以在的行反转情况必须一致（要么都反转要么都不）。 如果两个 $1$​ 位于同一列，那么一个所在的行不反转 $\\Leftrightarrow$ 另一个反转。 这是个等价关系，对每行建立反转和不反转两个点，并查集维护连通块，同一行的两个点连通无解。 考虑两行之间的关系，要么四个点都不连通，要么一定是分成两组连通。 因此连通块的情况是完全对称的，假设最终有 $2x$ 个连通块，答案是 $2^x$ 。 时间复杂度 $O(n\\alpha(n))$ 。 I. Strange Sorting 给一个排列，每次可以选一个逆序对，将这两个位置作为端点的区间排序。 构造至多 $\\lfloor\\frac{n}{2}\\rfloor$ 次操作将排列排序。 从前往后扫，每次遇到 $a_i\\neq i$，就找最大的 $j$ 满足 $a_i&gt;a_j$, 容易发现 $i,i+1$ 一定都在 $a[i\\cdots j]$ 中。 所以每次都能让两个数字归位，只需要至多 $\\lfloor\\frac{n}{2}\\rfloor$ 次。复杂度 $O(n^2)$ 。 *K. Rainbow Subarray 给定数组 $a_1,a_2,\\dots,a_n$ 和一个常数 $k$ 。 称区间 $[l,r]$ 是好的，需要满足 $a_i+1=a_{i+1}\\ \\forall i\\in[l,r)$ 。 你可以进行至多 $k$ 次操作，每次操作可以让一个数字 $+1$ 或 $-1$ 。 使得操作后，最大化最长的好区间长度。 首先令 $a_i’=a_i-i$ ，好的区间性质等价于所有 $a_i’$ 相同。 把一组数变成一样的最小代价是都变成中位数。 枚举区间左端点，另一个单调的指针维护右端点。 用对顶堆维护当前数集，如果可以扩张右端点就扩展，否则跳过这个左端点。 总扩张/删除次数 $O(n)$ ，复杂度 $O(n\\log n)$ 。 M. Almost Convex 给定点集 $S$ 满足任意三点不共线。 定义一个多边形是 $S$ 的近似凸包，当且仅当其满足： 多边形的顶点 $\\subseteq S$ ； $S$ 中的所有顶点要么在多边形上要么在多边形内。 定义 $S$ 的所有近似凸包中顶点数最少的为 $R$ 。 求有多少个 $S$ 的近似凸包 $Q$ ，满足 $|Q|\\le |R|+1$ 。 $R$ 就是 $S$ 的凸包，$Q$ 是凸包一条边向里面凹进去一个点。 按每个点进行极角排序，扫一圈如果相邻的两个点都是凸包顶点，答案 $+1$ 。 复杂度 $O(n^2\\log n)$ 。","link":"/contest/icpc/48/jinan/"},{"title":"The 48th ICPC Asia Macau Regional Contest","text":"补题链接, 英文题面, 官方题解 整体偏难，第一次以打星队的身份参赛，心态轻松抢了两个一血太爽了 ID Difficulty (0-5) Topic Status Code","link":"/contest/icpc/48/macau/"},{"title":"The 48th ICPC Asia Hefei Regional Contest","text":"补题链接, 题面, 官方题解(有些题解描述有问题) 套路题多，要熟悉使用板子 ID Difficulty (0-5) Topic Status Code A B 3 Dilworth’s Theorem, DP Upsolved B.cpp C 2 Palindrome Automaton Solved C.cpp D E 0 Brute Force Solved E.cpp F 0 Brute Force Solved F.cpp G 1 Binary Search, DP Solved G.cpp H I 2 Brute Force Solved I.cpp J 2 MST, DFS Solved J.cpp K L *B. Queue Sorting 给一个可重数集，$i\\ (1\\le i\\le 500)$ 有 $a_i\\ (\\sum a_i\\le 500)$ 个，问有多少序列符合能拆成最多两个不降子序列。 根据 Dilworth 定理，最小链分解数等于最长反链长度，即最长下降子序列长度不能超过 $2$ 。 考虑按照值的大小依次插入数字，对于每次加入的数字 $i$ ，只要不是最后一个，必定形成一个长度为 $2$ 的下降子序列。 设 $dp(i,j)$ 表示，数字 $1\\sim i$ 已经全部插入，最后一个长度为 $2$ 的下降子序列考前的那个数字的位置是 $j$ 。 令 $sum_x=\\sum_{y\\le x} a_y$ ，每次 $i+1$ 插入的时候是不能放到位置 $j$ 前面的，所以相当于对 $[j+1,sum_{i}]$ 和 $a_{i+1}$ 个位置做插板。 因为要考虑新的 $j’$ 的位置，所以枚举有 $x$ 个 $i+1$ 直接加到最后了，第一个不是最后的位置是 $k$ ，转移是$$dp(i+1,k)=\\sum_{j, x} dp(i,j)\\times {k-j-1 \\choose a_{i+1}-x-1}$$组合数的含义是，新序列灵活的位置有 $k-j-1$ 个，其中有 $a_{i+1}-x-1$ 个是 $i+1$ 。 特殊处理全都放到最后的情况：$dp(i+1,j)=dp(i,j)$ 。答案是 $\\sum dp(n,*)$ 。 复杂度 $O(n\\times \\max a_i\\times (\\sum a_i)^2)$ ，比较大但是跑不满 。 C. Cyclic Substrings 首尾相接的字符串 $S$，对每个回文子串 $t$，出现次数是 $f(t)$ ，长度是 $g(t)$ ，求 $\\sum f(t)^2\\times g(t)$ 。 回文树，一个串的出现次数就是对应节点在 $fail$ 树上的子树总出现次数。 对于循环，考虑倍长成 $S+S$，一个串只有在结束位置 $&gt;|S|$ 时才被计数，这样不会数重。 但还要保证只计数串长 $\\le |S|$ 的串，因此在统计答案的时候只有节点代表的长度符合要求才被算进答案即可（注意这并不影响该节点向其 $fail$ 树上的父节点贡献累计出现次数）。 复杂度 $O(|S||\\Sigma|)$ 。 E. Matrix Distances签到，按颜色分类计算，XY分离，排序，前缀和。 F. Colorful Balloons签到，map 统计字符串出现次数。 G. Streak Manipulation 给一个长为 $n\\ (1\\le n\\le 2\\times 10^5)$ 的 $01$ 序列，最多把 $m\\ (0\\le m\\le n)$ 个 $0$ 变 $1$ 。 对于修改后所有极长的 $1$ 连续段，最大化其中第 $k\\ (1\\le k\\le 5)$ 长的长度。 二分答案，尝试是否能搞出来至少 $k$ 个长度超过 $mid$ 的段。 令 $dp[i][j]$ 表示到 $i$ 为止，搞出 $j$ 个符合要求的段最少需要修改多少次。 由于极长，需要满足当前位置是这一段的最后一个，需要 $i=n$ 或 $i+1$ 的位置是 $0$ 。 然后找出 $i-mid$ 往前的第一个 $0$ ，然后中间这段的 $0$ 都得改成 $1$ 。 对于前面的代价，找一个 $dp[*][j-1]$ 的前缀最小值即可，记录前缀 $\\min$ 优化一下。 复杂度 $O(nk\\log n)$ 。 I. Linguistics Puzzle 给一个 $n\\ (n\\le 52)$ 进制的乘法表，每个数位都一对一映射到了一个字母，还原每个字母代表的数位，多解输出任意解。 乘法表里的数字最多两位，因此先求出每个数位在个位和十位（进的位）分别应该出现多少次。 然后对给出的字符表计算同样的结果，按照两个次数构成的 pair 分类。 这样每个字符/数位都会分到某一类中，感性理解一类里的元素不会很多，因此在此约束下，暴搜每个数位对应的字符。 复杂度我不会证明，但是真闲的没事可以打表找一下上界 。 J. Takeout Delivering 一个有边权无向图 $(n\\le 3\\times 10^5,m\\le 10^6)$ ，找一个 $1$ 到 $n$ 的路径，最小化路径上最大边权+次大边权。 枚举最大边，枚举 $1,n$ 分别连接这个边的哪个端点，次大边来自这两段路径。 变成最小化路径最大边权，答案一定在最小生成树上，从 $1,n$ 分别 DFS 一遍最小生成树求出到每个点的瓶颈边即可。 判断答案时注意要保证两段的瓶颈边权均不超过枚举的边权。 复杂度 $O(m\\log n)$ 。","link":"/contest/icpc/48/hefei/"},{"title":"1st Universal Cup, Stage 4: Ukraine","text":"Links: 补题链接, 题面, 官方题解 思维题很多，赛中要大胆猜结论，证明可以用程序 ID Difficulty (0-5) Topic Status Code A 0 Greedy Solved A.cpp B 3 Counting Solved B.cpp C D 1 Constructive Algorithms, Shortest Path Solved D.cpp E 1 Constructive Algorithms Solved E.cpp F 2 Constructive Algorithms, Brute Force Solved F.cpp G 4 Bitmasks, DP Upsolved G.cpp H I 2 Counting, DP Solved I.cpp J 3 Inversions Solved J.cpp K 0 DFS Solved K.cpp L M N A. Adjacent Product Sum 重排一个环形数列，最大化重排后的相邻两数乘积之和。 由排序不等式，感性理解一下应该是大的挨在一起，小的挨在一起。 所以排序之后左右交替放就行了，复杂度 $O(n\\log n)$ 。 *B. Binary Arrays and Sliding Sums 给定 $n,k$ , 考虑所有长度为 $n$ 的二进制序列 $a_0,a_2,\\dots,a_{n-1}$ : 令 $f_i=\\sum_{j=0}^{k-1}a_{(i+j)\\mod n}$ 得到序列 $f_0,f_1,\\dots,f_{n-1}$ ，求有多少个本质不同的 $f$ 。 $T\\ (T\\le 10^5)$ 组询问，每次问一对 $n,k\\ (2 \\le k &lt; n \\le 10^6 )$ 。 下述过程中，所有下标均在模 $n$ 意义下。 有 $a_i-a_{i-k}=f_i-f_{i-1}\\in[-1,1]$ ，当不为 $0$ 时一定能确定 $a_i$ 和 $a_{i-k}$ 的取值，否则两者可能同为 $0$ 或同为 $1$ 。 按照间隔为 $k$ 分组，会分成 $g=gcd(n,k)$ 个“环”，每个环长为 $n/g$ 。 每个环中只要有一个位置能确定（有一个 $f_i-f_{i-1}\\neq 0$ ），整个环的取值都能确定。 考虑每个环对 $f$ 的贡献，容易发现对于每连续 $k$ 个位置，每个环都恰好占走了 $k/g$ 个位置。 因此对于某个 $a$ 数列，我们去考虑和他 $f$ 数组一致（冲突）的数列的特征，按照环考虑： 对于可以从 $f$ 唯一确定的环，显然这些位置必须和 $a$ 保持一致。 否则是全 $0$ / 全 $1$ 环（称作特殊环），由于每个环对 $f$ 的贡献位置个数一致，所以只要全 $1$ 环的“环个数”一致即可。 因此我们按 $f$ 划分出等价类：特殊环位置的集合一致（个数+下标），全 $1$ 环的个数一致，非特殊环对应位置完全一致。 因此对应特征计数：枚举特殊环数 $k$ ，特殊环下标集选法 ${g\\choose k}$，全 $1$ 环个数选法 $(k+1)$ ，非特殊环方案数 $(2^{n/g}-2)^{g-k}$ 。$$\\begin{array}{ll}ans &amp;= \\sum_{k=0}^g(k+1){g\\choose k}(2^{n/g}-2)^{g-k}\\\\&amp;= \\sum_{k=0}^g{g\\choose k}(2^{n/g}-2)^{g-k}+ \\sum_{k=0}^g k\\times \\frac{g!}{k!(g-k)!}\\times (2^{n/g}-2)^{g-k}\\\\&amp;= \\sum_{k=0}^g{g\\choose k}(2^{n/g}-2)^{g-k}+ g\\sum_{k=1}^g {g-1\\choose k-1}\\times (2^{n/g}-2)^{g-k}\\\\&amp;=((2^{n/g}-2) + 1)^g + g\\times ((2^{n/g}-2) + 1)^{g-1}\\end{array}$$快速幂计算即可，复杂度 $O(T\\log n)$ 。 D. Distance Parities 一个 $n\\ (n\\le 500)$ 个点的无向图，给定任意两点最短路奇偶性，构造一个图符合要求。 构造一个图 $G$ ：对于任意两点，给定性质中如果要求是奇数距离就给两点间加一条边，否则不加。 证明：这个图 $G$ 符合要求 $\\Leftrightarrow$ 存在一个图 $G’$ 符合要求。 左推右显然，证明右推左，若 $G’$ 符合要求，那么对于任意点对 $u,v$ ： 若距离为奇数，则在 $G$ 中两点距离为 $1$ 符合要求； 若距离为偶数，则必然存在一个点 $w$ ，在 $G’$ 中到两个点距离为奇数（例如 $u\\to v$ 最短路上，除掉 $u,v$ 的第一个点），则在 $G$ 中 $w$ 和两个点都有一条边，因此 $G$ 中两点距离为 $2$ 符合要求。 因此判断 $G$ 是否合法即可，Floyd-Warshall 复杂度 $O(n^3)$ 。 E. Excellent XOR Problem 长度为 $n\\ (n\\le 10^5)$ 的数列 $a_i\\ (0\\le a_i&lt; 2^{30})$ ，将数列划分成多于一段，使得每段异或和两两不同。 如果全部异或和不为 $0$ ，任意切分两段异或和不同。 否则考虑从左往右第一个不为 $0$ 的数字 $a_x$ ： 对于某个 $p\\in[x+1,n-1]$ ，如果 $[x+1,p]$ 异或和不为 $0$ 也不为 $a_x$ ，那么找到了一种分三段的方法。 否则，数列中除了 $0$ 以外，是偶数个 $a_x$ ，这种情况一定无解。 所以找到 $a_x$ 之后扫一遍就可以了，复杂度 $O(n)$ 。 F. F*** 3-Colorable Graphs 给一个连通二分图 $K_{n,m}\\ (2\\le n,m\\le 10^4)$，问最少加多少边使得这个图不能三染色。 不加边，二分图可以二染色。 加一条边，随便把这条边的一个端点染成第三种颜色就保证了相邻不同，此时可以三染色。 加两条边，如果有公共点，把一个公共点染成第三种颜色；否则四个不同的端点如果构成了 $K_4$ ，则需要四染色，否则四个点中至少有一对点没有边相连，把这两个点都染成第三种颜色后，其他维持二分图染色不变，依然可以三染色。 加三条边，因为是连通二分图且两侧都有至少两个点，必定存在长度为 $3$ 的链，必能补成 $K_4$ ，需要四染色。 因此如果能加两条边补出 $K_4$ 答案就是 $2$ ，否则答案是 $3$ 。 因为二分图中不能有奇环，因此唯一的情况是图中存在四元环。 考虑暴力，枚举左侧点 $u$ ，枚举 $u$ 的邻居 $v$ ，枚举 $v$ 的邻居 $u’$ ，当 $u’\\neq u$ 时对 $u’$ 累加计数器。 当遇到一个 $u’$ 被累计了两次的时候，就找到了答案。否则不存在四元环。 暴力复杂度是对的，对于每个 $u$ ，每个 $u’$ 只会枚举到 $O(1)$ 次，否则找到答案结束，因此复杂度是 $O(n^2)$ 的。 当然也可以直接上四元环计数，复杂度 $O(m\\sqrt{m})$ 。 *G. Graph Problem With Small n 给一个 $n\\ (2\\le n\\le 24)$ 个点的无向图，判断是否任意点对间存在从一个出发另一个结束的哈密顿路径。 设 $dp[S][u][v]=0/1$ 表示经过的点集为 $S$ ，起点为 $u$ 终点为 $v$ 的路径是否存在，这个dp是 $O(n^32^n)$ 的。 进一步设 $dp[S][u]$ 表示经过点击为 $S$ ，起点为 $u$ 的可能的终点集合，新 dp 的值相当于之前 dp 的值的状压。 初始化 $dp[{u}][u] = {u}$ ，求 $dp[S][u]$ 时考虑第一步走 $u\\to v$ ，那么方程是：$$dp[S][u] = \\bigcup_{v\\in S} dp[S/{u}][v]$$ 枚举 $S,u$ 之后枚举 $u$ 邻居 $v$ ，现在复杂度降低到了 $O(n^22^n)$ 。 换个思路，直接考虑有哪些 $v$ 在 $dp[S][u]$ 中，我们考虑路径的最后一步 $w\\to v$ ，需要保证 $w$ 在 $S/{v}$ 对应状态的可能终点中（即 $dp[S/{v}][u]$ 中），并且 $w$ 和 $v$ 有边相连。 预处理每个人的邻居集 $N_i$ ，条件等价于 $dp[S/{v}][u]$ 和 $N_v$ 有交，即方程是：$$dp[S][u] = \\bigcup_{dp[S/{v}][u]\\ \\cap\\ N_v\\neq \\emptyset} {v}$$枚举 $S,u,v$ 判断是 $O(1)$ 的，因此这个转移的思路复杂度也是 $O(n^22^n)$ 的。 这个转移的好处是 $dp[S][u]$ 的值只依赖于 $dp[*][u]$ ，换句话说，可以 $O(n2^n)$ 求出对某个特定 $u$ 的所有 dp 值。 考虑 $O(n2^n)$ 求出所有的 $dp[*][0]$ ，即从 $0$ 出发的所有可能的集合的可能的终点。 考虑一条 $u$ 开始 $v$ 结束的哈密顿路径，必定经过 $0$ ，点集可以拆成两段 $S$ 和 $U/S \\cup {0}$ （互补集合都加上 $0$ ）。 因此对于 $dp[S][0]$ 中的每个点 $u$ ，都可以和 $dp[U/S\\cup{0}][u]$ 中的每个点 $v$ 匹配。 再次使用状压的思路，设 $ans[u]$ 表示 $u$ 出发可能的哈密顿路径终点集合。 枚举 $S$ ，枚举 $S$ 中的点 $u$ ，令 $ans[u] = ans[u] \\operatorname{or} dp[U/S\\cup{0}]$ 即可。 这样总复杂度神奇的降到了 $O(n2^n)$ ，空间复杂度 $O(2^n)$ 。 由于 1s 需要的计算量达到了 2e8 所以需要比较精细的实现，实测不同的实现方法常数甚至有 5 倍的差距。 可能的卡常方法： $S$ 不包含 $0$ 的状态是没有用的，所以可以删去一半的集合，$2^n\\to 2^{n-1}$ 卡掉一半的常数。 多使用位运算及 __builtin 系列函数加快枚举集合内元素，而不直接 $O(n)$ 枚举： for (int ts = S, v; ts; ts &amp;= ~-ts) v = __builtin_ffs(ts) - 1; I. Increasing Grid 一个 $n\\times m\\ (1\\le n\\times m\\le 2\\times 10^5)$ 的矩阵，每个位置的数字在 $1\\sim n+m$ 之间。 现给定一些位置的取值，问其他位置有多少种不同的合法填法，使得每行从左往右递增，每列从上到下递增。 观察发现 $A_{ij}$ 的值只能是 $i+j-1$ 或 $i+j$ ，选了 $i+j-1$ 左上角的所有数字就确定了，否则右下角所有数字都确定了。 因此所有数字分成两类，一类能推出所有左上角，一类能推出所有右下角，先把冲突无解的情况判掉。 因此存在一个从左下到右上的分界线，每次向上或向右，计数矩阵填法等价于计数分界线选法。 处理出来每个位置是必定在左上/必定在右下/都可以，然后从左下向右上dp分界线方案数，复杂度 $O(n\\times m)$ 。 注意一个位置如果上方必须是边界就不能往右延伸了。 *J. Jewel of Data Structure Problems 给定一个排列 $(1\\le n,q \\le 2\\times 10^5)$，支持交换两个位置，查询最长的子序列，其逆序对数为奇数。 结论大杂烩。 整体逆序数为 $0$ 的情况（排列为 $1,2,\\dots,n$ ），答案为 $-1$ 。 如果整个排列逆序对数为奇数，答案是 $n$ 。 否则考虑每个数 $p_i$ 产生的逆序对数 $c_i$ （前面比他大的个数+后面比他小的个数），如果存在一个 $c_i$ 是奇数，删掉对应的 $p_i$ 即可，答案是 $n-1$ 。 否则所有 $c_i$ 都是偶数，考虑序列中的任意一个逆序对 $(p_i,p_j)$ ，这个逆序对在 $c_i,c_j$ 中都被考虑了一次，所以把这两个位置删掉，逆序对的减少量一定是奇数，所以答案最差 $n-2$ 。 于是只需要维护： 当前逆序数是否为 $0$ （排列是否为 $1,2,\\dots,n$ ）：维护 $p_i\\neq i$ 的个数，交换两个操作下可以 $O(1)$ 维护。 总逆序数奇偶性：考虑交换 $p_i,p_j$ ，容易发现 $p_k\\ (k\\in (i,j))$ 参与的逆序对数奇偶性不会发生变化（按值和 $p_i,p_j$ 的关系分三段讨论），而 $p_i,p_j$ 的交换必然导致增加/删除了一个由 $p_i,p_j$ 构成的逆序对，因此每次操作总逆序数奇偶性一定改变，即交换两个元素排列的奇偶性一定改变。而一个排列可以通过 $n-$ 环数次交换变成 $1,2,\\dots,n$ ，所以其逆序对数的奇偶性与 $n-$ 环数相同，初始化复杂度 $O(n)$ 。 是否有一个 $c_i$ 为奇数（所有的 $c_i$ 的奇偶性）：考虑 $c_i$ 的计算方法，假设 $i$ 前面比 $p_i$ 大的数字有 $x$ 个，那么 $c_i=x+[p_i-1-(i - 1 - x)]=2x+p_i-i$ ，所以 $c_i$ 的奇偶性只和 $i,p_i$ 有关，只有交换两个的操作可以 $O(1)$ 维护。 总复杂度 $O(n+q)$ ，不需要任何数据结构，实在优雅。 K. King of Swapping 对于 $n$ 的排列，给定 $m$ 个操作 $a_i,b_i$ 代表如果 $p_{a_i}&gt;p_{b_i}$ 则可以交换这两个数。 问使用给定的操作任意多次，是否能把任意一个 $n$ 的排列变成任意另一个 $n$ 的排列。 其实是问能否交换任意两个位置（反证即可），把操作看成有向边，也就是要判断图是否强连通。 判一下原图和反图 $1$ 是否都能到所有点即可（这是整个图强连通的等价命题），复杂度 $O(n)$ 。","link":"/contest/ucup/1/4/"},{"title":"The 48th ICPC Asia Nanjing Regional Contest","text":"补题链接, 英文题面, 官方题解 注意比赛节奏，写代码要简化讨论，为什么袋鼠题我每年都不太会 ID Difficulty (0-5) Topic Status Code","link":"/contest/icpc/48/nanjing/"},{"title":"The 9th CCPC Harbin Onsite","text":"补题链接, 英文题面, 官方题解 本赛季第一场线下赛，最后卡在了一个拉格朗日函数，最优化课上学过的全忘了… ID Difficulty (0-5) Topic Status Code","link":"/contest/ccpc/9/harbin/"},{"title":"The 9th CCPC Guilin Onsite","text":"补题链接, 英文题面, 官方题解 题不难，但对常用结论要有敏感度，注意积累总结套路 ID Difficulty (0-5) Topic Status Code","link":"/contest/ccpc/9/guilin/"},{"title":"Sophomore Year","text":"今天是 2021 年 7 月 6 日，星期三。 两年前的今天，高考的前夜。担心感冒不敢开空调，燥热地躺在床上，辗转反侧。 碰巧昨晚又梦到了还在高中，困扰在时时刻刻的恐惧中，惊醒后久久才反应过来，已经上了两年大学了。 正好今天 22 级班助的聘用正式确定下来了，大二的生活算是尘埃落定，回顾一下这一年。 算法竞赛首先谈竞赛，这一年算是经历了很多事情，打了一年的银，但是对竞赛的感情经历了很多变化。 大概从去年 7 月份的沈阳银首开始，自己进入了一个目标很不明确的时期。 暑假多校打的一般，除此外也没有进行太多的训练。队内排名基本稳定在第三名的位置（和前后都有一定距离）。 温水煮青蛙，没有紧张感，也没有什么太具体的目标。就这样浑浑噩噩的打了网络赛、CCPC 桂林银、ICPC 沈阳银。 寒假安排的很紧，除了算法竞赛还插了数模美赛集训、DL &amp; CV 的假期交流课程、兼职教小孩 C 语言。 但就最后的结果来看，寒假可以说碌碌无为。美赛拿了 S 奖，线上交流没学到太多，竞赛的刷题量只能说保持水平。 如何评价 2022 年 ICPC 昆明赛区？ 开学之后为了备战省赛和昆明，训练量加了不少，也是有点魔怔的一段时间。 3 月某天看到了一个人的 CodeForces 满屏绿色，有点受刺激，于是自己也离谱地连续打卡了近 50 天。 期间课几乎都没听，作业都尽量用最短的时间解决掉了，计组实验也和冯老师说全部都堆到比赛后验收。 于是到了浙江省赛和昆明。因为疫情各种延期，两个比赛在同一个周末的两天举办。 省赛打的很顺利，前两个小时几次榜一，最后因为做不动期望题 E 拿了第四，不过也算是不错的成绩。 昆明打之前觉得一切准备的都还不错，甚至还有 Eva 在做志愿者，应该会很踏实。 然而正赛开始之后就傻眼了。首先是大量的期望概率题目，签到想不出来；接下来比赛节奏完全没体验过，1h 过了一题，然后一直持续到 4h 才有过题。期间一直让自己冷静下来，安慰自己把有想法的题都过了就没问题，但是心里一直很慌。直到最后真的三题结束了，自己还没有反应过来发生了什么。 印象很深的是 Eva 走过来坐在我旁边，哭了出来，我问她为什么哭，她说真的替我很伤心。 反应过来之后，想想自己花了大半个学期训练，课程都快结束了，什么都没开始学；竞赛也没拿到想要的奖项，甚至差两名就要打铜；正逢当天是 2022 的多省联合省选。一切都让我回忆起了当年省选退役时那段黑暗的日子，无力挣扎，也很想哭。 当晚自然是又做了噩梦，时间线十分的混乱，又是刚退役回去学文化课，又是赛场上自己一个又一个错误的决定。 仿佛自己又要面对竞赛打的不好就会退役，退役就要回去面对那段整日担惊受怕、生活在高压和恐惧中的文化课生活。 昆明之后经历的生活也确实像高中退役后补欠下的债，上课听不懂，作业不会做，计算机组成原理四五个大实验一点还没开始写（甚至是还没学会）。最噩梦的是期末季也开始了，在大家都开始复习的时候，自己从头开始。 之后五月的某天，因为要宣传这个赛季的结果，集训队开了一次会，然后拍集体照。 开会的时候，刘老师谈到了暑假组队的事情：“原则上自由组队，大家敞开说，原有的队伍也可以重组，不要拿队伍磨合的好说事情，留给磨合的时间有很多。” 听完我突然有了重组的想法，虽然昆明爆炸的主要原因是我决策失误，但是这个赛季的队伍确实也有明显的问题。 之后也有两个比较巧合的事情让我真的开始思考这件事情。一个是在高级数据结构课上，刘老师突然问我，我们队要不要重组。另一个是恰好有一个实力比较强的队伍会拆散，其中一个队员的长处我认为比较互补。 但是提出换队友这个事情确实比较尴尬，首先打了一年银并不是某一个人的问题，其次确实这只是我自己的想法。自己根本不知道该如何开口商量这个事情，如果真的换了，我也不知道应该怎么面对被换出去的队友。 经历了很长一段的权衡后，我终于还是和刘老师商量了这个事情。第二天刘老师给我的答复是：如果所有人都同意，他可以同意。那天纠结了很久，最后一口气和相关的所有人都聊完了。中间聊天的过程真的很害怕，自己不知道怎么开口，也不好意思开口。但好在最后所有人都同意了，更换的队友也和另外两个很强的选手重新组了队伍。 真的很感谢涉及到这个艰难的过程的所有人，大家都因为我的选择或多或少受到了一些影响，尤其是被换出去的队友。到现在我还是很内疚，真的很感谢他能理解我的想法。 接下来的比赛只剩下了校赛，第 26 次 CSP 和蓝桥杯的国赛。这段时间几乎都在做期末大作业，偶尔做几道题保持水平。 但意外的是这几场比赛打的都还可以，杭电校赛靠手速拿到了一等奖，CSP - 26 靠卡常 AK 了。如何评价 CSP - 26？ 此外 5 月底的时候刘老师找到我，让我作为负责人组织一下今年广西省赛的出题，兴奋又有点紧张。 于是在期末前的几个星期，拉了出题团队，大家一起挤时间出题造题，还在考试周期间拉了几个集训队员验题。 期末最后一门考完当晚开始赶工题目的最后一部分，配置spj 到了半夜两点多，第二天早上修 pdf 版题面又发现了好多语法错误，改完反复读了好几遍之后终于在 ddl 前整理好了。 好在最后两天的比赛都很圆满，第一次做正式比赛的负责人，感觉收获很多（ 至少学会了用 PTA 和 Polygon ）。 把 Colin 和 Eva 的名字留在一场正式赛的题面里，以及给好多人讲题都是曾经的梦想啊。如何评价第五届GXCPC？ 总而言之，这一年的竞赛经历虽然比较曲折，但也确实让我认真地思考了自己到底想要什么。 下一个赛季大概率是最后一年参赛了，希望自己在想要摆烂的时候能从这一年的经历中汲取动力，加油。 课内学习单从成绩上来看，和大一相比可能课程难度降低了，所以成绩比大一要好一些。 大二上意外地打出了历史最高绩点；大二下某门学分很重的课因为某些原因爆炸了，绩点没稳住，不过也过去了。 成绩撇开不谈，记录几门我觉得很收获很多或值得推荐的课程和老师，仅供参考。 形式语言与自动机（黄孝喜老师）：收获主要是此前对这个领域了解很少，上完能比较充分的了解到这个领域的一些基础模型，学编译的时候也能轻松些。课程中涉及到很多非常好玩的小算法，其中的构造思路也是比较有意义的。我最后期末考前还在沉迷构造图灵机无法自拔（虽然非常遗憾期末不考） 数字电路/计算机组成原理（冯建文老师）：作为一个对硬件十分反感的人来说真的很感谢冯老师硬逼着我把偏硬的这两门课学完了。作业和实验的任务量都比较大，但是冯老师真的非常负责，有什么问题基本都会不厌其烦的回答完。对我而言主要收获是学到了一个计算机系的学生应该知道的硬件相关内容。 概率论与数理统计（张安老师）：老师人超好，授课很清晰，要求很明确，作业量不大，治好了我的积分恐惧症。 密码学（胡耿然老师）：比较全面的介绍密码学的基础内容，上课也很轻松，对数论有一些要求（快速幂和逆元）。 影视音乐鉴赏（徐艳老师）：上课主要是看电影，很适合在繁忙的课程安排中放松一下。需要做的事情非常非常少，只要做完要求的事情就可以放心拿很好很好的成绩（不能再明说了，懂得都懂吧） 电子钢琴（盛晨老师）：这个课偏钢琴普及向，课程考核也主要根据每个人的基础决定，期末考试就是一首自选曲目。因为我和 Eva 都有一些底子，所以上课基本就是两个人弹想弹的曲子，一个学期弹了很多四手联弹非常开心，期末也选择了四手联弹的方式，选的《摇篮曲》。推荐的原因主要是很难有其他方式可以如此方便的摸到键盘，所以比较感兴趣的同学推荐试一试，没坑，但是如果在意成绩的话最好还是有一点钢琴基础。 体育舞蹈（董晓波老师）：每周都能和 Eva 去跳一次舞非常开心！上课比较轻松，老师教的很好，运动量即使是我也能撑得住，成绩对我来说也非常满意了。此外貌似有几组同学经过一个学期真的成了情侣，有需求的同学可以去试试桃花运（ 未来大二这一年一直在考虑未来的发展，如果决定进企业的话，对我而言其实本科毕业直接上班可能比读研更有效。 借助一些契机和尝试，也让我明白自己还是有热爱的，所以决定试一试，本科毕业之后继续读书，先不去工作啦。 关于方向，还是决定离开机器学习这个领域了，非常感谢导师能够理解和支持我的想法。 毕竟还年轻，还有试错的机会，此时能比较轻松地放下对失败的顾虑，去追求自己的学术理想何尝不是一件大幸事。 我们我们的爱情在这一年里有很多很感动的时刻，也有很多次吵架走到低谷。 时间长了不像刚开始谈恋爱那样激烈，但是日常平静生活中的一次次相互扶持，润物无声。 关于爱情，还是没有什么太多可以讲出来的，所以分享几个这一年中我觉得值得纪念的事情吧： 一起选修了电子钢琴，期末考核曲目选择了四手联弹《摇篮曲》 我通过大二上的体测，大二下一起选修了体育舞蹈，作为舞伴一起上课和考试 印象很深的是大二上体测的最后一项一千米，Eva 最后两圈全程陪我跑完，按照商量好的方案每 10 秒给我报一次时间。 最后的一段冲刺真的没有力气了，完全盯着终点线的 Eva 在跑。最后体测分数正好 60 分，0.1 都没多。 大二两次期末的突击复习，能一起承受住期末的压力，比较平稳的度过。 其实主要是帮我复习，因为有的课我考试前一天还啥都不会， Eva 经常因为压力太大会哭出来。 复习期间压力很大的环境下很容易发生争吵，真的很感动我们能一起挺过来那段时间，生气也能快速调整情绪。 教 Eva 学算法， Eva 能进杭电女队，参加下一个赛季的女生赛（Eva 进队的时候我真的很激动）。 一起去当下一届英才班的班助（大一刚谈恋爱的时候就聊起来过这个事情，发现我们都挺喜欢带学弟学妹的）。 最后很想分享一句话，在两个人的感情遇到问题的时候，我觉得这是一个很好的衡量自己做的是否正确的标准。","link":"/summary/sophomore/"},{"title":"Training Records - We Bare Bears!","text":"Season: 2022-2023 (the 47th ICPC &amp; the 8th CCPC) 杭电 2022 - 4 队训练记录。个人题解点表格中比赛名称跳转。 Contests Date Contest Rank Solved Upsolved Award 2022/09/11 2022 CCPC Qualification Round 17 8 / 13 8 / 12 - 2022/09/17 2022 - 2023 ICPC Asia EC Regionals Online (I) 25 9 / 12 9 / 12 - 2022/11/06 2022 CCPC Weihai Site 12 8 / 13 10 / 13 Gold 2022/11/13 2022 CCPC Guangzhou Site 12 7 / 13 7 / 13 Gold 2022/11/20 2022 - 2023 ICPC Asia Hefei Regional 6 10 / 13 11 / 13 Gold 2022/12/18 2022 - 2023 ICPC Asia Nanjing Regional 13 7 / 13 8 / 13 Gold 2023/02/06 ICPC Training Camp powered by Huawei. Day 1 36 5 / 12 5 / 12 - 2023/02/07 ICPC Training Camp powered by Huawei. Day 2 15 7 / 11 7 / 11 - 2023/03/25 2022 - 2023 ICPC Asia East Continent Final 49 6 / 13 6 / 13 Silver 2023/04/15 2023 Zhejiang Provincial CPC 2 10 / 13 10 / 13 Gold Virt. Contests Date Contest Rank Solved Upsolved 2022/07/31 2021 CCPC Finals 20 7 / 12 7 / 12 2022/08/31 2021 - 2022 ICPC Latin American Regional 21 8 / 13 8 / 13 2022/09/07 2019 - 2020 ICPC Northwestern European Regional 44 9 / 11 9 / 11 2022/09/25 XXI Open Cup, Grand Prix of Wroclaw 87 7 / 13 7 / 13 2022/10/02 2020 - 2021 ICPC Xiaomi Invitational, Finals 8 6 / 13 6 / 13 2022/10/16 2019 - 2020 ICPC Latin American Regional 45 10 / 13 11 / 13 2022/10/18 2018 CCPC Finals 26 6 / 12 7 / 12 2022/10/19 2019 ICPC World Finals 46 5 / 11 6 / 11 2022/10/26 2019 CCPC Finals 24 4 / 12 5 / 12 2022/10/29 2019 - 2020 ICPC Asia Hong Kong Regional 4 5 / 11 10 / 11 2022/10/31 2022 CCPC Guilin Site 31 7 / 13 10 / 13 2022/11/03 2018-2019 ICPC Asia Nanjing Regional 6 9 / 13 11 / 13 2022/11/08 2020-2021 ICPC Asia Yinchuan Regional 25 6 / 13 9 / 13 2022/11/14 2022-2023 ICPC North Western Russia Regional 6 9 / 14 10 / 14 2022/12/3 2022-2023 ICPC Asia Jinan Regional 16 7 / 13 9 / 13 2022/12/12 2022-2023 ICPC Asia Hangzhou Regional 18 7 / 13 10 / 13 2022/12/14 2015 ICPC Asia EC-Finals 7 7 / 13 7 / 13 2023/03/08 2017 CCPC Finals 23 6 / 11 6 / 11 2023/03/20 2022-2023 ICPC Asia Hong Kong Regional 8 7 / 12 7 / 12 2023/03/21 2022 ICPC Southeastern Europe Regional 43 8 / 14 8 / 14 2023/04/02 2018 ICPC Asia Qingdao Regional 66 8 / 13 8 / 13 2023/04/05 2020-2021 ICPC NEERC Regional 30 10 / 14 10 / 14 Multi-University Training Date Contest Rank Solved Upsolved 2022/07/23 2022 Nowcoder Multi-University Training Contest 2 40 9 / 12 10 / 12 2022/07/25 2022 Nowcoder Multi-University Training Contest 3 16 6 / 10 8 / 10 2022/07/26 2022 HDU Multi-University Training Contest 3 45 7 / 12 9 / 12 2022/07/28 2022 HDU Multi-University Training Contest 4 79 8 / 11 8 / 11 2022/07/30 2022 Nowcoder Multi-University Training Contest 4 16 10 / 14 11 / 14 2022/08/01 2022 Nowcoder Multi-University Training Contest 5 - 9 / 11 10 / 11 2022/08/02 2022 HDU Multi-University Training Contest 5 81 6 / 12 7 / 12 2022/08/04 2022 HDU Multi-University Training Contest 6 73 7 / 12 7 / 12 2022/08/06 2022 Nowcoder Multi-University Training Contest 6 65 6 / 13 8 / 13 2022/8/08 2022 Nowcoder Multi-University Training Contest 7 11 7 / 12 8 / 12 2022/08/09 2022 HDU Multi-University Training Contest 7 79 6 / 11 9 / 11 2022/08/11 2022 HDU Multi-University Training Contest 8 29 9 / 13 9 / 13 2022/08/13 2022 Nowcoder Multi-University Training Contest 8 28 3 / 12 4 / 12 2022/08/15 2022 Nowcoder Multi-University Training Contest 9 24 8 / 11 8 / 11 2022/08/16 2022 HDU Multi-University Training Contest 9 60 6 / 11 6 / 11 2022/08/17 2022 Nowcoder Multi-University Training Contest 0 29 6 / 13 6 / 13 2022/08/18 2022 HDU Multi-University Training Contest 10 14 10 / 12 10 / 12 2022/08/20 2022 Nowcoder Multi-University Training Contest 10 37 5 / 11 5 / 11","link":"/summary/we-bare-bears/"},{"title":"Freshman Year","text":"今天是 2021 年 7 月 8 日，星期四。 一年前的今天，高考最后一门刚刚考完。走出考场，回到自己的教室，拿手机，搬行李，告别。 离开学校的时候，碰到了还在梳理交通的竞赛教练，问我考的怎么样，然后约了后天要给高一的学弟们上课。 直到昨晚，暑假回本部给又一届的学弟们上完最后一天课。从二中本部的校门里走出来，回头看看。 来杭电之前高考完就跟爸爸妈妈说我不复读，当晚就对答案，大概 645。报了南科大综评，拿到了还算不错的校考分。 然后在南校区给高一的同学讲了比较入门的概率，也是那些在一年前的暑假认识的，刚踏入二中大门学弟。 结束的时候在空空的学校里溜达，想想他们上课时候那种纯粹的热情，一代又一代，多少有一点感慨。 走之前拍了张照片，想起来一句自认为很应景的话：“雨过天青云破处，者般颜色做将来” 出分的晚上比较坦然，提前几分钟查到了分数，比估计的低 9 分，都扣在语文上，115 / 134 / 136 / 251。 之后的几天比较迷茫，听了几个学校的招生宣讲都不尽如人意。南科大那边几度有希望，后来终究是落空。 在我想起来杭电这所学校的时候，突然感觉就是要去这里了。 可能是高二去学军培训喜欢上了杭州这个城市，也可能是对竞赛生涯结束的不甘吧。 先自己偷偷找 Claris 要到了教练的联系方式，问了读研和专业的事情，刘老师的热情的杭州话让人很舒服。 然后就是小心翼翼地和父母交流，说我自己的想法和考虑，直到最后心里十分踏实地填上了第一志愿。 录取的结果是数学系，高考分数达到了卓越学院二次选拔的报名分数线，报了卓越学院的招生考试。 之后的假期写了几个板子，打了几场 CF 恢复一点水平，参加了 HDU 的几场内部训练，搬了一套题恰烂钱。 开学之前和岳老师吃了个饭（竟然还赶上了他生日）， 让我重心不要全部放到竞赛上，要给自己留个后路。 初到杭电有一说一假期还是过的比较随意，虽然报名了卓越学院，但是一点没准备，9 月份忐忑地就来到杭电啦。 考试之前自己很没有底气，当时觉得能进计科班就不错了。考完觉得考的还行，因为竞赛里接触过一点高数线代的知识，觉得自己英语阅读也比较会蒙。然后晚上大概九点的时候出成绩了，震惊自己竟然过了英才班的线。 晚上给爸爸妈妈很激动地打了个电话，有点担心 11 进 9 被刷掉，一直到十二点多才睡着。 第二天面试的时候其实自己比较轻松，感觉面试向来都比较稳 比较会吹 ，面试单独面，五个老师。 面试比较自然，老师们的问题基本是跟着我的自我介绍思路走，不过还是有几个问题血压拉满。 我努力地强调自己的竞赛水平，然后冯老师问：“现在让你去打区域赛能拿到什么奖项？” 我介绍了一下高中学校和班级的情况，然后另一个老师问：“你觉得二中和衡一哪个更好？” 周老师（也是现在的导师）问：“你也不能打一辈子竞赛啊。以后有什么进一步的打算？”我说会读研，以后可能会去当大学老师。导师笑笑说要想当教授，后面得去好点的大学读书。 面试完出来觉得自己还挺稳的，但是也不敢确定，忐忑到了晚上十点多出了结果。终于还是去学计算机了。 之后的生活很顺利，见面会，正常上课，班委选举（当了学委）。 上课的时候强迫自己去提问，回答问题，意识到自己可以做一些 由自己决定的 想做什么就做什么 的事。 遇到了自己喜欢的老师，有能够舒适相处，真心相待的一帮同学，慢慢地从高三痛苦自闭的状态走出来了。 竞赛这段话也想写给每个学竞赛过程中感到无力的同行者。 算法竞赛的魅力在于，通过努力积累或灵机一动，你能够做出越来越难的题目，是一种对自我能力的认可。 算法竞赛的危险亦在于，你学会的东西越多，认识的厉害的人越多，面对不可计数的强者，很容易陷入自我否定。 想到杭电之前，很长一段时间都觉得，大学不会再打竞赛了。 学竞赛的过程中经历的打击，不仅是比赛和上课中受到一众神仙居高临下的压迫感，更多的其实是周围人不经意的否定和安慰。对我来说，这是一种对信心很大的打击，会想要证明自己，亦或是心里感到无力而故作轻松。 在面临是否买 D 的抉择时，我放弃了。不是担心取得不了什么结果，而是觉得压力太大了。 在选学校的时候，突然想到杭电的那一刻，有种死灰复燃的感觉。 记起来 NOIP 2018 结束的时候，在存真楼下，孙校长和我们几个刚从秦皇岛回来的学生说的几句话： “学别的竞赛的，最终的发展和竞赛不一定有关系，但是算法竞赛的学生，最终往往都会选择计算机行业。” 算法竞赛会在心里埋下一颗种子。 我不是那种一帆风顺的天才，在受到打击的时候，我会感到无力。 但当我抛开名利、和他人比较、证明自己这些功利的意义之后，我发现自己还剩下些东西，还能看到初心。 是对算法的欣赏和热爱，是理解每一个算法、做出每一个题目的瞬间，精神上的享受，这就够了。 至少在我看来，从我开始接触竞赛，到做出很多重要的选择，我决策的初心从来都不是名利，因为对算法还爱着。决定最终没有买 D 类，最大的原因还是在那个时刻，竞赛带来的痛苦超过了学习的享受，被一次次的排名裹挟，被各种机会所吸引，我越来越像一个没有自我的机器，越来越被成功学牢牢锁死。而在我选择大学的时候，竞赛对我的意义不再是未来的全部了。我能够静下来，问问自己对算法还有没有那种近乎痴迷的喜爱，能够将它作为一种兴趣去发展，不需要考虑付出和回报，至少在大学，我还是有自由支配自己的权利。 我还是那个深深爱着算法的小孩，对几十行代码背后的智慧如痴如醉。 Gold Medal (30th Place) : The 45th ICPC Asia Jinan Regional Contest, 2020 Gold Medal ( 15th Place) : The 18th Zhejiang Provincial Collegiate Programming Contest, 2021 Silver Medal (28th Place) : The 45th ICPC Asia Shenyang Regional Contest, 2021 课内学习第一个学期不会选课，修了系统默认的 25.25 个学分， 第二个学期修了 32.25 个学分。 通识选修只完成了科技发展与科学精神，大二上应该会把剩下的指标修完。 数理基础 数分 （6 * 3.5 + 5 * 4.2）、高代（3 * 5 + 2 * 5）、离散（4 * 5）、大物1（3 * 5） CS专业课 计导（2 * 5）、程设基础（5 * 5）、数据结构（4 * 4.5）、C++ 面向对象（3 * 5） 通识教育 思修法基（3 * 5）、心理健康（1 * 4.3）、大军（2 * 4.8）、ACM（2 * 5） 外语类 英语精读 A（2 * 4.4 + 2 * 4.6）、英语听说 A（1 * 4.3 + 1 * 4.7）、实用翻译（2 * 4.6） 其他 大学启示录（1 * 4）、形式与政策（0.5 * 5）、科研实践（1 * 5）、体育（1 * 2.1 + 1 * 1.8） 很幸运的是遇到的老师都很认真负责，老师们对课程内容非常了解，自己遇到问题也都能很好沟通。 很多课程都觉得自己做的没那么好，对给出的成绩也常常受之有愧。 数学分析和高等代数两门数学基础课的表现截然相反，让我更清楚地意识到很大程度上我是个兴趣驱动的人。 对数分的知识体系自己本身可能就不太感兴趣，加上数分课是真的提不起来精神，两个学期的数学分析成绩都不太看的过去，数分上可能要在大三重修了。老师确实想要认真教会我，可是自己确实提不起兴趣去学。经历了数分上的洗礼，数分下还是逼着自己学了学，最后的结果算是马马虎虎吧，确实对不起老师对不起自己。 很喜欢高代老师的课，很大程度驱动我去花相对比较多的时间在这门课上。两个学期最后的结果都比较好，在自己喜欢的科目上能够看到自己做了些事情，也是让自己很开心的一件事。唯一遗憾的是期末错在了最后一节课老师强调过的一个小点上（证明正定阵需先说明对称）。大二下预定了老师的近世代数。 也很喜欢 Cathy 上的英语精读，也算是第一次能让我主动提起来学英语的兴趣。 Cathy 的课有一种很轻松的气氛，不会按照课本一板一眼的去上，讲的很多东西很受用。 感谢程设和OOP（C++）的老师对我的包容，自己在这两门课上确实有过很幼稚的行为。很佩服将近退休的老师能精确把控很多细节，随手写的代码能一遍过编译什么错都没有。 离散数学和数据结构 给了我很深刻的教训。两门都是自认为了解比较多的，数据结构甚至申请了免听。考前复习的都不是很充分，等上了考场发现要开始脑补一堆一堆的概念。期末离散卷子简单，没暴露出来什么问题。数据结构觉得自己看看书就够了，最后的成绩却不尽如人意，原因只是不知道排序里的一个既定细节，只能悔不当初。 大学物理和思想道德修养与法律基础 两门课结果意外的好，其实自己认真去学一学还是可以有效果的。中学阶段一直头疼的政治在闭卷的期末考试也写了个差不多。学不会电磁在考场上也做出来了绝大多数题。考试遇到不会的题也不能太着急，多想一会没准就通了。 体育 从中考的 $18$ 分保底，到大一上的体测 $36$ 分，痛失两个学期的奖学金，终究还是没逃过身体素质不行这个问题。还是感谢环境逼着我去直面体育，按着体能班的要求大一下结结实实把 40 次阳光长跑跑完了，也确实让我看到耐力可以有提升，从操场跑一圈就喘不上气，到体测的时候人生第一次把 1000 米全跑下来，确实是很激动的。也终于在锻炼身体上有了动力，首先是大二下想要和 qyy 同学一起学体育舞，其次是想要恰奖学金。 我的她只想说爱情的体验是一种很纯粹的幸福。 愿意为她牺牲自己的一切，无时无刻都会想起她的事情，找不到她会坐如针毡，什么都做不下去。 她所高兴的事情比她还高兴，她难受的时候会跟着一起哭出来，在爱情中两个人都学会了如何照顾对方。 两个人在一起呆着常常心有灵犀，做事情反应如出一辙，很多事情不用言语。 两个人在一起呆着就是最快乐的事情，能够一起学习，散步，她在我的身边就能感受到无比的踏实。 会走到一起的人终究不会分开。心里对未来有着期盼，静下心来踏踏实实做事，继续加油。","link":"/summary/freshman/"},{"title":"Hello World","text":"「 Hello, the lovely world. 」 「 Stay hungry, Stay foolish. 」 Inline FormulaOne day you are surviving in the wild. After a period of exploration, you determine a safe area, which is a convex hull with $n$ vertices $P_1,P_2,\\dots,P_n$ in counter-clockwise order and any three of them are not collinear. Now you notice that there will be $q$ airdrop supplies, and for the $i$-th supply, its delivery range is described by a circle $C_i$ , which means the supply will landed with uniformly probability among all the points with a real number coordinate inside $C_i$. You need supplies so much that you decide to predetermine a starting point for each supply, and the starting point of two different supplies can be different. Every starting point should be inside the safe area and have the smallest expected value of the square of the Euclidean distance to the corresponding supply landing point. Recall that On a two-dimensional plane, the Euclidean distance between two points $(x_1,y_1)$ and $(x_2,y_2)$ is $\\sqrt{(x_1-x_2)^2+(y_1-y_2)^2}$. If both coordinates of a point are all integers, then we call this point an integer point. Block Formula$$\\int \\frac{dx}{cos^2x}=\\int sec^2xdx=tan x+C\\$$ $$\\int \\frac{dx}{sin^2x}=\\int csc^2xdx=-cot x+C$$ $$\\sum\\limits_{i = 0}^{E} w[i]{M \\choose i} {N \\choose iS} \\frac{(iS)!}{(S!)^{i}} \\sum\\limits_{j = 0}^{E - i} (-1)^{j} {M - i \\choose j} {N - iS \\choose jS} \\frac{(jS)!}{(S!)^{j}} (M - i - j)^{N - iS - jS}$$ $$= \\sum\\limits_{i = 0}^{E} w[i]{M \\choose i} {N \\choose iS} \\frac{(iS)!}{(S!)^{i}} \\sum\\limits_{j = i}^{E} (-1)^{j - i} {M - i \\choose j - i} {N - iS \\choose jS - iS} \\frac{(jS - iS)!}{(S!)^{j - i}} (M - j)^{N - jS}$$ Matrix$$\\begin{bmatrix}(\\omega_n^0)^0 &amp; (\\omega_n^0)^1 &amp; \\cdots &amp; (\\omega_n^0)^{n-1}\\\\(\\omega_n^1)^0 &amp; (\\omega_n^1)^1 &amp; \\cdots &amp; (\\omega_n^1)^{n-1}\\\\\\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\(\\omega_n^{n-1})^0 &amp; (\\omega_n^{n-1})^1 &amp; \\cdots &amp; (\\omega_n^{n-1})^{n-1}\\end{bmatrix}\\begin{bmatrix}a_0\\\\a_1\\\\\\vdots\\\\a_{n-1}\\end{bmatrix}=\\begin{bmatrix}A(\\omega_n^0)\\\\A(\\omega_n^1)\\\\\\vdots \\\\A(\\omega_n^{n-1})\\end{bmatrix}$$ To prevent escaping, you need to use \\\\\\\\ to make a new line rather than \\\\ . LinkFor more about the Mathjax symbols, refer to: The Comprehensive LaTeX Symbol List. Code Highlight &amp; Fold12345678910111213141516171819202122&gt;&gt;&gt; import thisThe Zen of Python, by Tim PetersBeautiful is better than ugly.Explicit is better than implicit.Simple is better than complex.Complex is better than complicated.Flat is better than nested.Sparse is better than dense.Readability counts.Special cases aren't special enough to break the rules.Although practicality beats purity.Errors should never pass silently.Unless explicitly silenced.In the face of ambiguity, refuse the temptation to guess.There should be one-- and preferably only one --obvious way to do it.Although that way may not be obvious at first unless you're Dutch.Now is better than never.Although never is often better than *right* now.If the implementation is hard to explain, it's a bad idea.If the implementation is easy to explain, it may be a good idea.Namespaces are one honking great idea -- let's do more of those!","link":"/misc/hello-world/"}],"tags":[{"name":"Dynamic Programming","slug":"Dynamic-Programming","link":"/tags/Dynamic-Programming/"},{"name":"Segment Tree","slug":"Segment-Tree","link":"/tags/Segment-Tree/"},{"name":"Shortest Path","slug":"Shortest-Path","link":"/tags/Shortest-Path/"},{"name":"Auxiliary Tree","slug":"Auxiliary-Tree","link":"/tags/Auxiliary-Tree/"},{"name":"Knapsack","slug":"Knapsack","link":"/tags/Knapsack/"},{"name":"Convex Hull Trick","slug":"Convex-Hull-Trick","link":"/tags/Convex-Hull-Trick/"},{"name":"Probabilities","slug":"Probabilities","link":"/tags/Probabilities/"},{"name":"Constructive Algorithms","slug":"Constructive-Algorithms","link":"/tags/Constructive-Algorithms/"},{"name":"Brute Force","slug":"Brute-Force","link":"/tags/Brute-Force/"},{"name":"Boyer–Moore","slug":"Boyer–Moore","link":"/tags/Boyer%E2%80%93Moore/"},{"name":"Counting","slug":"Counting","link":"/tags/Counting/"},{"name":"Bitmasks","slug":"Bitmasks","link":"/tags/Bitmasks/"},{"name":"Pigeonhole Principle","slug":"Pigeonhole-Principle","link":"/tags/Pigeonhole-Principle/"},{"name":"DSU on Tree","slug":"DSU-on-Tree","link":"/tags/DSU-on-Tree/"},{"name":"Monotonic Queue","slug":"Monotonic-Queue","link":"/tags/Monotonic-Queue/"},{"name":"Strings","slug":"Strings","link":"/tags/Strings/"}],"categories":[{"name":"Summary","slug":"Summary","link":"/categories/Summary/"},{"name":"Contest","slug":"Contest","link":"/categories/Contest/"},{"name":"AtCoder","slug":"Contest/AtCoder","link":"/categories/Contest/AtCoder/"},{"name":"Codeforces","slug":"Contest/Codeforces","link":"/categories/Contest/Codeforces/"},{"name":"CCPC","slug":"Contest/CCPC","link":"/categories/Contest/CCPC/"},{"name":"UCUP","slug":"Contest/UCUP","link":"/categories/Contest/UCUP/"},{"name":"ICPC","slug":"Contest/ICPC","link":"/categories/Contest/ICPC/"}],"pages":[{"title":"About Me","text":"Hello, I am Yixiong Gao(高义雄). Welcome to my blog. I’m a Christian and I’m quite grateful for the abundance of grace from God in my life. Now I worship and serve in the Putonghua Ministry of St. Andrew’s Church Kowloon, a thriving Mandarin-speaking community. I’m now a fourth-year undergraduate student in Computer Science at Hangzhou Dianzi University. I am broadly interested in theoretical computer science. Currently, I am focusing on combinatorial optimization problems. I’m a contestant in competitive programming. I won 4 gold medals in the International Collegiate Programming Contests (ICPC) Regional Contests, and 3 gold medals in the China Collegiate Programming Contests (CCPC). This is my Codeforces profile. I’m also a problem setter of competitive programming. I’ve set problems for several official contests and many training contests. Date Contest Name Links Sep/17/2023 The 48th ICPC Asia EC Regionals Online Selection Contest (I) Problems Tutorial(Chinese) Jun/04/2023 The 6th Guangxi Collegiate Programming Contest Problems Tutorial(Chinese) Jun/26/2022 The 5th Guangxi Collegiate Programming Contest Problems Tutorial(Chinese) Aug/01/2023 2023 HDU Multi-University Training Contest 5 Problems Tutorial(Chinese) Jan/27/2023 2024 CityU Programming Contest Problems More information can be found in my CV (Last updated: Jan 21, 2024).","link":"/about/index.html"}]}